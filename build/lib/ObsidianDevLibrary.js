/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class ObsidianDevLibrary {
    constructor(plugin) {
        this.plugin = plugin;
    }
    setContainerElement(containerEl) {
        this.containerEl = containerEl;
        containerEl.empty();
    }
    ///////////////////////
    // PUBLIC
    ///////////////////////
    // Settings can be rendered in HTML, or just plain text. Setting html:true allows html tags to render.
    simpleAddSetting(options, components) {
        const setting = new obsidian.Setting(this.containerEl);
        const { name, description, html } = options;
        if (name) {
            setting.setName(name);
            if (html) {
                setting.nameEl.innerHTML = name;
            }
        }
        if (description) {
            setting.setDesc(description);
            if (html) {
                setting.descEl.innerHTML = description;
            }
        }
        let componentsToReturn = [];
        for (let i = 0; i < components.length; i++) {
            if (components[i].type) {
                componentsToReturn.push(this.addText(settings, components[i]));
            }
        }
        return { setting: setting, components: componentsToReturn };
    }
    addSettingWithText(options) {
        const { name, description, html, key, placeholder, autoSave, onChange } = options;
        const setting = this.addSetting({ name, description, html });
        const component = this.addText(setting, { key, placeholder, autoSave, onChange });
        return { setting, component };
    }
    addSettingWithToggle(options) {
        const { name, description, html, key, onChange, value, autoSave } = options;
        const setting = this.addSetting({ name, description, html });
        const component = this.addToggle(setting, { key, onChange, autoSave, value });
        return { setting, component };
    }
    addSetting(options) {
        const setting = new obsidian.Setting(this.containerEl);
        const { name, description, html } = options;
        if (name) {
            setting.setName(name);
            if (html) {
                setting.nameEl.innerHTML = name;
            }
        }
        if (description) {
            setting.setDesc(description);
            if (html) {
                setting.descEl.innerHTML = name;
            }
        }
        return setting;
    }
    addText(setting, options) {
        const { placeholder, key, autoSave, onChange, } = options;
        let component;
        setting.addText((comp) => {
            component = comp;
            component.setValue(this.plugin.settings[key] || '');
            component.setPlaceholder(placeholder || '');
            component.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (autoSave != false) {
                    this.plugin.settings[key] = value;
                    yield this.plugin.saveSettings();
                }
                if (onChange) {
                    onChange(value, component, setting);
                }
            }));
        });
        return component;
    }
    addToggle(setting, options) {
        const { key, onChange, autoSave, value } = options;
        let component;
        setting.addToggle((comp) => {
            component = comp;
            component.setValue((value != undefined) ? value : this.plugin.settings[key]);
            component.onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (autoSave != false) {
                    this.plugin.settings[key] = value;
                    yield this.plugin.saveSettings();
                }
                if (onChange) {
                    onChange(value, component, setting);
                }
            }));
        });
        return component;
    }
    isNumberGetNumber(value) {
        const isNumber = ((value != null) && (value !== '') && !isNaN(Number(value.toString())));
        return isNumber ? Number(value) : null;
    }
}

module.exports = ObsidianDevLibrary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
